<?php
$translate = $this->plugin('translate');
$escape = $this->plugin('escapeHtml');
$this->htmlElement('body')->appendAttribute('class', 'item resource browse analog-game-museum');

$query = $this->params()->fromQuery();
$itemSetShow = isset($itemSet);
if ($itemSetShow):
    $this->htmlElement('body')->appendAttribute('class', 'item-set');
    $query['item_set_id'] = $itemSet->id();
endif;
$sortHeadings = [
    [
        'label' => $translate('Title'),
        'value' => 'dcterms:title'
    ],
    [
        'label' => $translate('Class'),
        'value' => 'resource_class_label'
    ],
    [
        'label' => '公開日',
        'value' => 'ag:datePublished'
    ],
    [
        'label' => $translate('Created'),
        'value' => 'created'
    ],
];
?>

<?php if ($itemSetShow): ?>
    <?php echo $this->pageTitle($itemSet->displayTitle(), 2); ?>
    <h3><?php echo $translate('Item set'); ?></h3>
    <div class="metadata">
        <?php echo $itemSet->displayValues(); ?>
    </div>
    <div class="item-set-items">
    <?php echo '<h3>' . $escape($translate('Items')) . '</h3>'; ?>
<?php else: ?>
    <?php echo $this->pageTitle($translate('検索結果'), 2); ?>
<?php endif; ?>

<!-- 検索結果一覧 -->
<div class="results-container">
    <div class="result-stats">
        <div class="result-stats-top">
            <span class="result-count">検索結果件数: <?php echo $this->pagination()->getPaginator()->getTotalCount(); ?>件</span>
            <div class="view-toggle">
                <button class="view-button active" id="grid-view">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <rect x="3" y="3" width="7" height="7" rx="1"></rect>
                        <rect x="14" y="3" width="7" height="7" rx="1"></rect>
                        <rect x="3" y="14" width="7" height="7" rx="1"></rect>
                        <rect x="14" y="14" width="7" height="7" rx="1"></rect>
                    </svg>
                </button>
                <button class="view-button" id="list-view">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <rect x="3" y="3" width="18" height="4" rx="1"></rect>
                        <rect x="3" y="10" width="18" height="4" rx="1"></rect>
                        <rect x="3" y="17" width="18" height="4" rx="1"></rect>
                    </svg>
                </button>
            </div>
        </div>
        <div class="result-sort">
            <div class="sort-controls">
                <div class="sort-buttons">
                    <button type="button" class="sort-btn" data-sort="ag:datePublished" data-order="desc">
                        公開日新しい順
                    </button>
                    <button type="button" class="sort-btn" data-sort="ag:datePublished" data-order="asc">
                        公開日古い順
                    </button>
                    <button type="button" class="sort-btn" data-sort="created" data-order="desc">
                        登録日新しい順
                    </button>
                </div>
                <button class="filter-toggle-btn" id="filter-toggle-btn">
                    <?php echo $translate('絞り込み条件'); ?>
                </button>
            </div>
        </div>
    </div>
    
    <!-- 絞り込み条件パネル -->
    <div class="filter-panel" id="filter-panel" style="display: none;">
        <div class="filter-panel-header">
            <h3><?php echo $translate('絞り込み条件'); ?></h3>
            <button class="filter-close-btn" id="filter-close-btn">×</button>
        </div>
        
        <div class="filter-panel-content">
            <!-- 資料種別による絞り込み -->
            <div class="resource-type-filter">
                <h4><?php echo $translate('資料種別'); ?></h4>
                <ul class="filter-list">
                    <?php 
                    $resourceTypes = [
                        '108' => [
                            'label' => $translate('テーブルトップゲーム'),
                            'icon' => 'o-icon-chess-rook',
                            'color' => 'var(--color-tabletopgame)'
                        ],
                        '151' => [
                            'label' => $translate('冊子'),
                            'icon' => 'o-icon-book',
                            'color' => 'var(--color-volume)'
                        ],
                        '139' => [
                            'label' => $translate('個人'),
                            'icon' => 'o-icon-user',
                            'color' => 'var(--color-agent)'
                        ],
                        '136' => [
                            'label' => $translate('団体'),
                            'icon' => 'o-icon-building',
                            'color' => 'var(--color-agent)'
                        ]
                    ];
                    
                    $currentFilters = $this->params()->fromQuery();
                    foreach ($resourceTypes as $type => $typeInfo): 
                        $isActive = isset($currentFilters['resource_class_id']) && $currentFilters['resource_class_id'] == $type;
                        $queryParams = $currentFilters;
                        
                        if ($isActive) {
                            unset($queryParams['resource_class_id']);
                        } else {
                            $queryParams['resource_class_id'] = $type;
                        }
                        
                        $url = $this->url(null, [], ['query' => $queryParams], true);
                    ?>
                    <li class="filter-item<?php echo $isActive ? ' active' : ''; ?>">
                        <a href="<?php echo $escape($url); ?>" class="filter-link" style="--filter-color: <?php echo $typeInfo['color']; ?>">
                            <i class="<?php echo $typeInfo['icon']; ?>"></i>
                            <?php echo $escape($typeInfo['label']); ?>
                            <?php if ($isActive): ?>
                                <span class="remove-filter">×</span>
                            <?php endif; ?>
                        </a>
                    </li>
                    <?php endforeach; ?>
                </ul>
            </div>
            
            <!-- その他の絞り込み条件（既存のsearchFiltersを使用） -->
            <?php echo $this->searchFilters(); ?>
            
            <div class="filter-panel-footer">
                <button class="clear-all-filters-btn" onclick="clearAllFilters()">
                    <?php echo $translate('すべてクリア'); ?>
                </button>
            </div>
        </div>
    </div>
</div> <!-- filter-container 終了 -->

<?php $this->trigger('view.browse.before'); ?>

<!-- 結果カードグリッド -->
<div class="result-grid">
    <?php foreach ($items as $item): 
        $headingTerm = $this->siteSetting('browse_heading_property_term');
        $bodyTerm = $this->siteSetting('browse_body_property_term');
        $heading = $headingTerm ? $item->value($headingTerm, ['default' => $translate('[Untitled]')]) : $item->displayTitle();
        $body = $bodyTerm ? $item->value($bodyTerm) : $item->displayDescription();
        
        $className = $item->resourceClass() ? $item->resourceClass()->label() : '';
        $classNameEn = '';
        $classIcon = '';
        
        switch($className) {
            case "テーブルトップゲーム":
                $classNameEn = "tabletopgame";
                $classIcon = "o-icon-chess-rook";
                break;
            case "冊子":
                $classNameEn = "volume";
                $classIcon = "o-icon-book";
                break;
            case "個人":
                $classNameEn = "person";
                $classIcon = "o-icon-user";
                break;
            case "団体":
                $classNameEn = "organization";
                $classIcon = "o-icon-building";
                break;
            case "個別資料":
                $classNameEn = "ownedItem";
                $classIcon = "o-icon-note-sticky";
                break;
        }
    ?>
    <div class="result-card">
        <div class="card-image">
            <?php 
            $thumbnail = $this->thumbnail($item, 'medium');
            if ($thumbnail): 
            ?>
                <?php echo $item->linkRaw($thumbnail); ?>
            <?php else: ?>
                <?php // サムネイル画像がない場合のプレースホルダー ?>
                <?php echo $item->linkRaw(
                    '<div class="no-image-placeholder">
                        <i class="o-icon-media"></i>
                    </div>'
                ); ?>
            <?php endif; ?>
            <span class="card-type <?php echo $classNameEn; ?>"><i class="<?php echo $classIcon; ?>"></i> <?php echo $escape($className); ?></span>
        </div>
        <div class="card-content">
            <!-- リストビュー用のタイプ表示 -->
            <div class="list-view-type">
                <span class="card-type <?php echo $classNameEn; ?>">
                    <i class="<?php echo $classIcon; ?>"></i>
                    <?php echo $escape($className); ?>
                </span>
            </div>
            <h3 class="card-title"><?php echo $item->link($heading); ?></h3>
            
            <div class="card-meta">
                <?php 
                $publisher = $item->value('ag:publisher');
                $distributor = $item->value('ag:distributor');
                $hasPublisherInfo = $publisher || $distributor;
                ?>
                
                <?php if ($hasPublisherInfo): ?>
                    <div class="publisher-info">
                        <?php if ($publisher): ?>
                            <?php echo $escape($publisher->valueResource()->displayTitle()); ?>
                        <?php endif; ?>
                        
                        <?php if ($distributor): ?>
                            <?php if ($publisher): ?> & <?php endif; ?>
                            <?php echo $escape($distributor->valueResource()->displayTitle()); ?>
                        <?php endif; ?>
                    </div>
                <?php endif; ?>
                
                <?php if ($item->value('ag:datePublished')): ?>
                    <div class="date-info">
                        <?php echo $escape($item->value('ag:datePublished')); ?>
                    </div>
                <?php endif; ?>
            </div>

            <div class="card-tags">
                <?php foreach ($item->value('ag:gameType', ['all' => true]) as $value): ?>
                    <span class="card-tag"><?php echo $escape($value); ?></span>
                <?php endforeach; ?>
                
                <?php if ($item->value('ag:numberOfPlayers')): 
                    $numberOfPlayers = $item->value('ag:numberOfPlayers');
                    $numberOfPlayers = preg_replace('/–$/', '人–', $numberOfPlayers);
                    if (preg_match('/\d$/', $numberOfPlayers)) {
                        $numberOfPlayers .= '人';
                    }
                ?>
                    <span class="card-tag"><?php echo $escape($numberOfPlayers); ?></span>
                <?php endif; ?>
                
                <?php if ($item->value('ag:playTime')):
                    $target = array("PT","H","M","S");
                    $replaced = array("","時間","分","秒");
                    $playTime = $item->value('ag:playTime');
                    $playTime = str_replace($target, $replaced, $playTime);
                ?>
                    <span class="card-tag"><?php echo $escape($playTime); ?></span>
                <?php endif; ?>
                
                <?php if ($item->value('ag:audience')):
                    $audience = $item->value('ag:audience');
                    $audience = preg_replace('/–$/', '歳–', $audience);
                    if (preg_match('/\d$/', $audience)) {
                        $audience .= '歳';
                    }
                ?>
                    <span class="card-tag"><?php echo $escape($audience); ?></span>
                <?php endif; ?>
                
                <?php if ($item->value('ag:designer')): ?>
                    <span class="card-tag"><?php echo $escape($item->value('ag:designer')->valueResource()->displayTitle()); ?></span>
                <?php endif; ?>
            </div>
        </div>
    </div>
    <?php endforeach; ?>
</div>

<?php echo ($itemSetShow) ? '</div>' : ''; ?>
<?php $this->trigger('view.browse.after'); ?>

<!-- ページネーション -->
<div class="pagination">
    <?php echo $this->pagination(); ?>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // フィルターパネルの制御
    const filterToggleBtn = document.getElementById('filter-toggle-btn');
    const filterPanel = document.getElementById('filter-panel');
    const filterCloseBtn = document.getElementById('filter-close-btn');
    
    if (filterToggleBtn && filterPanel) {
        filterToggleBtn.addEventListener('click', function() {
            const isActive = filterPanel.classList.contains('active');
            
            if (isActive) {
                // パネルを閉じる
                filterPanel.classList.remove('active');
                filterToggleBtn.classList.remove('active');
                setTimeout(function() {
                    filterPanel.style.display = 'none';
                }, 300);
            } else {
                // パネルを開く
                filterPanel.style.display = 'block';
                filterPanel.classList.add('active');
                filterToggleBtn.classList.add('active');
            }
        });
    }
    
    if (filterCloseBtn && filterPanel) {
        filterCloseBtn.addEventListener('click', function() {
            filterPanel.classList.remove('active');
            filterToggleBtn.classList.remove('active');
            setTimeout(function() {
                filterPanel.style.display = 'none';
            }, 300);
        });
    }
    
    // パネル外クリックで閉じる
    document.addEventListener('click', function(event) {
        if (filterPanel && filterPanel.classList.contains('active')) {
            const filterContainer = document.querySelector('.filter-container');
            if (!filterContainer.contains(event.target)) {
                filterPanel.classList.remove('active');
                filterToggleBtn.classList.remove('active');
                setTimeout(function() {
                    filterPanel.style.display = 'none';
                }, 300);
            }
        }
    });
    
    // ESCキーで閉じる
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && filterPanel && filterPanel.classList.contains('active')) {
            filterPanel.classList.remove('active');
            filterToggleBtn.classList.remove('active');
            setTimeout(function() {
                filterPanel.style.display = 'none';
            }, 300);
        }
    });
    
    // ビュー切り替え
    const gridViewBtn = document.getElementById('grid-view');
    const listViewBtn = document.getElementById('list-view');
    const resultGrid = document.querySelector('.result-grid');
    
    if (gridViewBtn && listViewBtn && resultGrid) {
        gridViewBtn.addEventListener('click', function() {
            resultGrid.classList.remove('list-view');
            resultGrid.classList.add('grid-view');
            gridViewBtn.classList.add('active');
            listViewBtn.classList.remove('active');
            localStorage.setItem('agm-view-preference', 'grid');
        });
        
        listViewBtn.addEventListener('click', function() {
            resultGrid.classList.remove('grid-view');
            resultGrid.classList.add('list-view');
            listViewBtn.classList.add('active');
            gridViewBtn.classList.remove('active');
            localStorage.setItem('agm-view-preference', 'list');
        });
        
        // 保存された設定を読み込む
        const savedView = localStorage.getItem('agm-view-preference');
        if (savedView === 'list') {
            listViewBtn.click();
        } else {
            gridViewBtn.click();
        }
    }
    
    // 並び替えボタンの機能
    const sortButton = document.getElementById('sort-button');
    const sortBySelect = document.getElementById('sort_by');
    const sortOrderSelect = document.getElementById('sort_order');
    
    if (sortButton && sortBySelect && sortOrderSelect) {
        sortButton.addEventListener('click', function() {
            const currentUrl = new URL(window.location.href);
            const params = currentUrl.searchParams;
            
            // 現在のクエリパラメータを保持
            const currentParams = new URLSearchParams(window.location.search);
            
            // ソートパラメータを設定
            currentParams.set('sort_by', sortBySelect.value);
            currentParams.set('sort_order', sortOrderSelect.value);
            
            // ページパラメータをリセット（新しいソートでは最初のページから）
            currentParams.delete('page');
            
            // 新しいURLにリダイレクト
            const newUrl = currentUrl.pathname + '?' + currentParams.toString();
            window.location.href = newUrl;
        });
    }
    
    // フィルター条件の保存と復元
    function saveFilterState() {
        const currentParams = new URLSearchParams(window.location.search);
        const filterState = {};
        
        // 現在のフィルター条件を保存
        for (let [key, value] of currentParams.entries()) {
            if (key !== 'page' && key !== 'sort_by' && key !== 'sort_order') {
                filterState[key] = value;
            }
        }
        
        localStorage.setItem('agm-filter-state', JSON.stringify(filterState));
    }
    
    function restoreFilterState() {
        const savedState = localStorage.getItem('agm-filter-state');
        if (savedState) {
            try {
                const filterState = JSON.parse(savedState);
                const currentParams = new URLSearchParams(window.location.search);
                let hasChanges = false;
                
                // 保存されたフィルター条件を復元
                for (let [key, value] of Object.entries(filterState)) {
                    if (!currentParams.has(key) || currentParams.get(key) !== value) {
                        currentParams.set(key, value);
                        hasChanges = true;
                    }
                }
                
                // 変更があればURLを更新
                if (hasChanges) {
                    const newUrl = window.location.pathname + '?' + currentParams.toString();
                    window.location.href = newUrl;
                }
            } catch (error) {
                console.error('Error restoring filter state:', error);
            }
        }
    }
    
    // ページ読み込み時にフィルター状態を復元
    restoreFilterState();
    
    // フィルターリンククリック時に状態を保存
    document.addEventListener('click', function(event) {
        if (event.target.closest('.filter-link')) {
            // 少し遅延させてから保存（URLが更新されるのを待つ）
            setTimeout(saveFilterState, 100);
        }
    });
    
    // フィルタークリア
    window.clearAllFilters = function() {
        // 保存されたフィルター状態をクリア
        localStorage.removeItem('agm-filter-state');
        
        const currentUrl = new URL(window.location.href);
        const baseUrl = currentUrl.pathname;
        window.location.href = baseUrl;
    };
});
</script>